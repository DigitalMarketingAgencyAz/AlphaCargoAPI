// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  // url      = "postgresql://user:password@localhost:55432/alphacargo?connection_limit=5"
  url      = "postgresql://doadmin:AVNS_AQChFj4yUTXSX2PSHFx@db-postgresql-ams3-19323-do-user-15530903-0.c.db.ondigitalocean.com:25060/alphacargo?sslmode=require&connection_limit=5"
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  phone            String             @unique
  fio              String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  // parcels   Parcel[] // Одно-ко-многим отношение между User и Parcel
  isActive         Boolean            @default(true) // Поле для деактивации пользователя
  NotificationRead NotificationRead[]
  TGUsers          TGUsers?
  Payment          Payment[]
}

model Contract {
  id                      Int    @id @default(autoincrement())
  organizationalStructure String
  organizationName        String
  inn                     String
  email                   String
  contactPhone            String
}

model Notification {
  id        Int                @id @default(autoincrement())
  title     String
  message   String
  createdAt DateTime           @default(now())
  reads     NotificationRead[]
}

model NotificationRead {
  id             Int          @id @default(autoincrement())
  userId         Int
  notificationId Int
  readAt         DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId])
}

model Country {
  id          Int      @id @default(autoincrement())
  countryname String   @unique
  cities      City[]
  offices     Office[]
  Tariff      Tariff[]
}

enum City_Type {
  From
  To
  Both
}

model City {
  id              Int          @id @default(autoincrement())
  cityname        String       @unique
  countryId       Int
  type            City_Type    @default(Both)
  country         Country      @relation(fields: [countryId], references: [id])
  offices         Office[]
  calculatorsFrom Calculator[] @relation("CalculatorFrom")
  calculatorsTo   Calculator[] @relation("CalculatorTo")
  Tariff          Tariff[]
}

model Calculator {
  id           Int        @id @default(autoincrement())
  parcelTypeId Int
  parcelType   ParcelType @relation(fields: [parcelTypeId], references: [id])
  cityFromId   Int
  cityFrom     City       @relation("CalculatorFrom", fields: [cityFromId], references: [id])
  cityToId     Int
  cityTo       City       @relation("CalculatorTo", fields: [cityToId], references: [id])
  price        Int
}

model Bag {
  id    Int    @id @default(autoincrement())
  title String @unique
  price Int
}

model ParcelType {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Calculator Calculator[]
  Tariff     Tariff[]
}

model Resume {
  id              Int      @id @default(autoincrement())
  fullName        String
  phoneNumber     String
  desiredPosition String
  desiredSalary   Int
  resumeFile      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  checkFile String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Service {
  id           Int     @id @default(autoincrement())
  header_title String
  header_body  String
  description  String
  imagePath    String?
}

model Office {
  id             Int     @id @default(autoincrement())
  address        String
  contactNumbers String
  cityId         Int
  city           City    @relation(fields: [cityId], references: [id])
  countryId      Int
  country        Country @relation(fields: [countryId], references: [id])
  openingHour    Int // Время открытия (в 24-часовом формате)
  closingHour    Int
  lat            String?
  lng            String?
}

model Franchise {
  id         Int      @id @default(autoincrement())
  region     String
  city       String
  address    String
  fio        String
  birthDate  DateTime
  phone      String
  email      String
  sourceInfo String?
}

model Request {
  id              Int    @id @default(autoincrement())
  fullName        String
  phoneNumber     String
  pickupAddress   String
  pickupTime      String
  packageSize     String
  packageCount    Int
  deliveryAddress String
}

model TGUsers {
  id      Int    @id @default(autoincrement())
  chat_id String @unique
  phone   String @unique
  user    User?  @relation(fields: [userId], references: [id])
  userId  Int?   @unique
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  phone     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Tariff {
  id           Int    @id @default(autoincrement())
  countryId    Int
  typeId       Int
  cityToId     Int
  price        Int
  deliveryTime String

  country Country    @relation(fields: [countryId], references: [id])
  cityTo  City       @relation(fields: [cityToId], references: [id])
  type    ParcelType @relation(fields: [typeId], references: [id])
}

// model Parcel {
//   id                 Int       @id @default(autoincrement())
//   sender             String
//   recipient          String
//   status             String
//   sendDate           DateTime
//   receiveDate        DateTime?
//   invoiceNumber      String    @unique
//   deliveryCost       Float
//   trackingNumber     String    @unique
//   weight             Float?
//   dimensions         String?
//   contentDescription String?
//   userId             Int? // Внешний ключ для связи с моделью User
//   user               User?     @relation(fields: [userId], references: [id])
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt
// }
