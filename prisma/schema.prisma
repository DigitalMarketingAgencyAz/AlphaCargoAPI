// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://doadmin:AVNS_AQChFj4yUTXSX2PSHFx@db-postgresql-ams3-19323-do-user-15530903-0.c.db.ondigitalocean.com:25060/alphacargo?sslmode=require"
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  phone       String    @unique
  fio         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parcels  Parcel[] // Одно-ко-многим отношение между User и Parcel

}

model Country {
  id          Int       @id @default(autoincrement())
  countryname String    @unique
  cities      City[]  
  offices     Office[] 
}

model City {
  id          Int       @id @default(autoincrement())
  cityname    String    @unique
  countryId   Int     
  country     Country   @relation(fields: [countryId], references: [id])
  offices     Office[] 
}

model Bag {
  id          Int       @id @default(autoincrement())
  title       String    @unique
}

model Service {
  id           Int       @id @default(autoincrement())
  header_title String
  header_body  String
  description  String
  imagePath    String?
}

model Office {
  id             Int       @id @default(autoincrement())
  address        String
  contactNumbers String
  cityId         Int     
  city           City      @relation(fields: [cityId], references: [id])
  countryId      Int      
  country        Country   @relation(fields: [countryId], references: [id])
  openingHour Int       // Время открытия (в 24-часовом формате)
  closingHour Int
}

model Franchise {
  id          Int       @id @default(autoincrement())
  region      String    
  city        String    
  address     String
  fio         String    
  birthDate   DateTime  
  phone       String     
  email       String
  sourceInfo  String?  
}

model Request {
  id            Int      @id @default(autoincrement())
  fullName      String
  phoneNumber   String
  pickupAddress String
  pickupTime    String
  packageSize   String
  packageCount  Int
  deliveryAddress String
}

model Parcel {
  id               Int     @id @default(autoincrement())
  sender           String
  recipient        String
  status           String
  sendDate         DateTime
  receiveDate      DateTime?
  invoiceNumber    String  @unique
  deliveryCost     Float
  trackingNumber   String  @unique
  weight           Float?
  dimensions       String?
  contentDescription String?
  userId           Int?   // Внешний ключ для связи с моделью User
  user             User?   @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}